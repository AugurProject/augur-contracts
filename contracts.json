{
    "7": {
        "namereg": "0xc6d9d2cd449a754c494264e1809c50e34d64562b",
        "buyAndSellShares": "0xf2f03c6e253be11ab35c07601c693b0e78cc8bc4",
        "closeMarket": "0xa8525b6e4b36f3400aadbd599d2881f495123269",
        "closeMarketEight": "0x1868bcbdd69812349944de008e72c55a4fb50291",
        "closeMarketFour": "0x0126deea7ed475b4261cce5dd3efa21e35cdf17a",
        "closeMarketOne": "0xd48a4ef613a93ac6606640273f8e4b9752e876cc",
        "closeMarketTwo": "0x43d2d2cf722b72c6611384574a5b985e09a6026c",
        "comments": "0x93c1c8b63743f8ff467331a0da3498d0fba17ec6",
        "consensus": "0x96384c5f4d11972d519e7e8fa8a7aa8008526775",
        "createBranch": "0xd36bc932117fe4fc98be0e48734c0e6b5e94590b",
        "createEvent": "0x83dfd526b463fd4595444ccc7328365bbc5b0cce",
        "createMarket": "0xc4249c21017b0c6c9edc8ede2a4452aca723678d",
        "eventResolution": "0x2be5c8c3fa57487e398b05b05819f6ff2c43664d",
        "faucets": "0x4d8eb59ec97e68ad381f1562fa20213476b9d259",
        "insertionsort": "0x370ff7203a1263b8011f037d283e4628d5ab24b5",
        "makeReports": "0xd16dab8cae757a5383ef949518883c2c583a43d9",
        "orderBook": "0x3388ee0696227d128c9cae07012ee1bbb63f994c",
        "quicksort": "0xe40839bb175bcbe5d1131ade8263911e556ee315",
        "sendReputation": "0x4c9c37e985734f9c86a2ca886a213473c0eab20e",
        "transferShares": "0x6a9e110ef71085f7cc31caee71ae7fb4dad22fa1",
        "branches": "0xb777b0eefbe986ca0c511903e76bf21b1120599e",
        "cash": "0xfe9676f369b47a5cba4bea20bd2280d81585983a",
        "events": "0xf8d38aaa5f7b08de1d7feee20d136fa7f7e0eb91",
        "expiringEvents": "0xeee51df37e22f4458ff25fb3b230cc34f8ad38e3",
        "fxpFunctions": "0xe35f2d19fbebc0dcd1d2ac7d94aa443ab16a197f",
        "info": "0x414c81818db9d4c92e57c3f16000614c055c388c",
        "markets": "0x767b08e20f0c32ea4d2b7d9e46b8ffc69ac32996",
        "reporting": "0xd29caf0311436f56ee2d6ab36d806dfad2ef8807"
    },
    "10101": {
        "namereg": "0xc6d9d2cd449a754c494264e1809c50e34d64562b",
        "buyAndSellShares": "0xe5b327630cfa7f4b2324f9066c897dceecfd88a3",
        "closeMarket": "0xc1c4e2f32e4b84a60b8b7983b6356af4269aab79",
        "closeMarketEight": "0x8caf2c0ce7cdc2e81b58f74322cefdef440b3f8d",
        "closeMarketFour": "0x9fe69262bbaa47f013b7dbd6ca5f01e17446c645",
        "closeMarketOne": "0x52ccb0490bc81a2ae363fccbb2b367bca546cec7",
        "closeMarketTwo": "0xd15a6cfc462ae76b9ec590cab8b34bfa8e1302d7",
        "comments": "0x5aec516b710957731986e8951ce092c59791dbb7",
        "consensus": "0x5f67ab9ff79be97b27ac8f26ef9f4b429b82e2df",
        "createBranch": "0x70a893eb9569041e97a3787f0c76a1eb6378d8b2",
        "createEvent": "0x81a7621e9a286d061b3dea040888a51c96693b1c",
        "createMarket": "0x6c4c9fa11d6d8ed2c7a08ddcf4d4654c85194f68",
        "eventResolution": "0x3f3276849a878a176b2f02dd48a483e8182a49e4",
        "faucets": "0x5069d883e31429c6dd1325d961f443007747c7a2",
        "insertionsort": "0x708fdfe18bf28afe861a69e95419d183ace003eb",
        "makeReports": "0x35152caa07026203a1add680771afb690d872d7d",
        "orderBook": "0x8a4e2993a9972ee035453bb5674816fc3a698718",
        "quicksort": "0xa34c9f6fc047cea795f69b34a063d32e6cb6288c",
        "sendReputation": "0x8c19616de17acdfbc933b99d9f529a689d22098f",
        "transferShares": "0x60cb05deb51f92ee25ce99f67181ecaeb0b743ea",
        "branches": "0x482c57abdce592b39434e3f619ffc3db62ab6d01",
        "cash": "0xbd19195b9e8a2d8ed14fc3a2823856b5c16f7f55",
        "events": "0xe4714fcbdcdba49629bc408183ef40d120700b8d",
        "expiringEvents": "0x4a61f3db785f1e2a23ffefeafaceeef2df551667",
        "fxpFunctions": "0x0fbddb6bfb81c8d0965a894567cf4061446072c2",
        "info": "0xc21cfa6688dbfd2eca2548d894aa55fd0bbf1c7e",
        "markets": "0xabe47f122a496a732d6c4b38b3ca376d597d75dd",
        "reporting": "0x77c424f86a1b80f1e303d1c2651acd6aba653cb6"
    },
    "errors": {
        "0x": "no response or bad input",
        "getSimulatedBuy": {
            "-2": "cost updating error (did you enter a valid quantity?)"
        },
        "getSimulatedSell": {
            "-2": "cost updating error (did you enter a valid quantity?)"
        },
        "closeMarket": {
            "-1": "market has no cash",
            "-2": "0 outcome",
            "-3": "outcome indeterminable"
        },
        "report": {
            "0": "could not set reporter ballot",
            "-1": "report length does not match number of expiring events",
            "-2": "voting period expired",
            "-3": "incorrect hash"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "checkReportValidity": {
            "-1": "report isn't long enough",
            "-2": "reporter doesn't exist, voting period is over, or voting period hasn't started yet"
        },
        "slashRep": {
            "0": "incorrect hash",
            "-2": "incorrect reporter ID"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buyShares": {
            "-1": "invalid outcome or trading closed",
            "-2": "entered a negative number of shares",
            "-3": "not enough money",
            "-4": "bad nonce/hash"
        },
        "sellShares": {
            "-1": "invalid outcome or trading closed",
            "-2": "entered a negative number of shares",
            "-3": "not enough money",
            "-4": "bad nonce/hash"
        },
        "WHISPER_POST_FAILED": {
            "error": 65,
            "message": "could not post message to whisper"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "IPFS_ADD_FAILURE": {
            "error": 506,
            "message": "files could not be added to IPFS"
        },
        "IPFS_GET_FAILURE": {
            "error": 507,
            "message": "could not retrieve file from IPFS"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        }
    }
}