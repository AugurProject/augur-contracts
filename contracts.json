{
    "2": {
        "buyAndSellShares": "0x01eec1eed6b5d224f33917b4ec14cdf5baeff780",
        "closeMarket": "0x5f01597f4158f145f5ba9d6d4cc32b62d33ccff9",
        "closeMarketEight": "0x1cb041bab73b9d2f63ddfee9bf9d5086230638e7",
        "closeMarketFour": "0x71d1f902f9a9928a2044d8768b19f17191a01b35",
        "closeMarketOne": "0xe699ee5166178595c4e9265bc7f8e0d8cb20d85a",
        "closeMarketTwo": "0x18ff8920dfea2b2be8101267d9d501f81cfeaf3b",
        "collectFees": "0xb9e7d200dc38c4406776ffccff8943dc3bfddd49",
        "completeSets": "0x413d65ba026fe70cc604a56bb671dcca4ff036d3",
        "consensus": "0x191df5512d358173ee659e548d9fd21da550edf0",
        "createBranch": "0x409068a490ae55b7314d25a4ad7f381cae787700",
        "createMarket": "0xe414cb46cb635b2591a218074d0ab30390741862",
        "eventResolution": "0x5afb8b6c25738f4bfd190f6df9e04f058d8df33b",
        "faucets": "0x5ce056d1a97b663012472eb3e7896dd42d5dcf4e",
        "forking": "0x878fb684091db964631a389e78f56954b4e50173",
        "makeReports": "0xb5912ea8a911542de971885bbaf2bec35bf2217d",
        "penalizeNotEnoughReports": "0xfbbc4b846703d18f87affce3de505aa7c5404848",
        "roundTwo": "0x3adb2dfcbc70571643d8b3c44f1359bb867e130c",
        "sendReputation": "0xb0d0f952793c4d2265c1073a24c4b7c3f052855b",
        "slashRep": "0xcdad023fba7e15917ae907fc94fac0ad5bb7f8d5",
        "trade": "0x8165213984ef305fc3fcc5cf30333accd18fa364",
        "backstops": "0x70c4772266c402d5c1ded75f9b99db86797e36d8",
        "branches": "0x902a642ceaf95eeb234584438012758d68d3bef0",
        "cash": "0x189b9107fdaef854bc8950b1c62d4da2df68e16a",
        "events": "0xefabfc253b1c8c47422d72942919ad491fc23908",
        "expiringEvents": "0x5a3f10c1f942a0de4354ed159e5e5b12dfb4d2d1",
        "fxpFunctions": "0x2c73b92ed27a96a30163ef736d6b155d7c636243",
        "info": "0x226713fb9663580b69bfacdd8eacafe8d8efa14c",
        "markets": "0xc7309a28ea0868f362f4659df2760bc669443f6b",
        "reporting": "0xa4ac5e8c2382734270c6dc0f2094961276f81812",
        "trades": "0x97db7aa6304aedbaf1fb49ddf269ceaeeb6f3f60"
    },
    "10101": {
        "buyAndSellShares": "0x3f765e6a96265fbb6ec1607078d844a32e0fc899",
        "closeMarket": "0xbc3737730e62de254ae959a500fb2201ca830b11",
        "closeMarketEight": "0xd0aec2894767244bf695f1756fdb98b91283053f",
        "closeMarketFour": "0xa6c0510c65a513676fe3ccb4744359707e260b4f",
        "closeMarketOne": "0xd344ce08e5baf993b86d7cfa58ef881501391054",
        "closeMarketTwo": "0x9da563d6de741c8becad0c2e821f5d453affff86",
        "collectFees": "0x16b2fdbfad37095bd87559cb1080ff70f0210d30",
        "completeSets": "0xa5220364b15e4690a7fe99289a2412ac9615b7d4",
        "consensus": "0x98493b8f16e5239c2d8cf0bd8baec6794d3140c3",
        "createBranch": "0xf606379950644622ee0e660deedabecb5195d664",
        "createMarket": "0x521026c174cbc8af871e61854d83915aa05ba431",
        "eventResolution": "0x49f7f70d65b04b4d67e3a0b24fbff7fb85c3dc7b",
        "faucets": "0xf35fd2eeab825b3a8df4c1a22524d7f8b4767311",
        "forking": "0x94792622dea28826d877e8cc542c946b5f830e16",
        "makeReports": "0x0d3794afa0ef1674b422931fd79efe6c2ce48407",
        "penalizeNotEnoughReports": "0x9be2fdb53459632a4dcd2d1c84951c3ec6875bc0",
        "roundTwo": "0xe9ae5166556f3b628778676e76e936109d203ccd",
        "sendReputation": "0xfa01886529aba09db0c829ffd8c71f75b8b28cb2",
        "slashRep": "0x644775f0e6e09fa125db702c1f01c87a0ed26901",
        "trade": "0x5a6b896c1004c61e0ac2327f7b9f03cf00f3880b",
        "backstops": "0x240b418921aab4618482d03fb74cc3dac857a40b",
        "branches": "0x05a945d5ddef38670e9f0443e88a1d568b4d5675",
        "cash": "0xc0996cdf5f1c3b598b5508bc9fcbc06e1307867b",
        "events": "0xed9663539fbe0293910e30670a42fc23a24d5b41",
        "expiringEvents": "0xff87d69ace4872def8d3c619b07ecce943d02f2d",
        "fxpFunctions": "0x7234fdef4086a8f32bdf73e2fe041ead066e9ec8",
        "info": "0xce58c43a02f1b61d9e0478f68e0bd165f0e215ea",
        "markets": "0x18db7e4098343ceff60b9a89a303d9717e6e9bbd",
        "reporting": "0xdf872973fd24b186c01344b308b25d86cbb645ac",
        "trades": "0xa4632f29efd8bcae6f655bc7d170a0a38f2552c0"
    },
    "errors": {
        "0x": "no response or bad input",
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizationCatchup": {
            "-2": "can only be called during the first half of the reporting period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "createSingleEventMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buy": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle-only branch",
            "-0x4": "not enough money or shares"
        },
        "sell": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle only branch",
            "-0x4": "not enough money or shares"
        },
        "trade": {
            "-1": "oracle only branch",
            "-2": "bad trade hash",
            "-3": "trader doesn't exist / own shares in this market",
            "-4": "must buy at least .00000001 in value",
            "10": "insufficient balance"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        }
    }
}
