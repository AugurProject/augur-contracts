{
    "2": {
        "buyAndSellShares": "0x8d28df956673fa4a8bc30cd0b3cb657445bc820e",
        "closeMarket": "0xab966a7e5ed3b0b86e230f6b6dbe3833556240ad",
        "closeMarketEight": "0x54b68f75acc41e20af31d97ac3c9ccd92f243765",
        "closeMarketFour": "0x0ef40b3861caa8c3695a067f3c19ecefccab6b51",
        "closeMarketOne": "0x075ddd0bf4c0aeaa35ed62c071e3e11cbf720715",
        "closeMarketTwo": "0x486b370b1ba29711b683e1e71cc9a7c2a1614e4c",
        "collectFees": "0x0e5816830d327c7272c115348a2dda92e4706b25",
        "completeSets": "0x4f0d1af7d72d72a2e95e1fb9d187e958c07a1084",
        "compositeGetters": "0xce65c10f58c0ba0fe6dd98c4872af2b14a97a539",
        "consensus": "0xfcd9b63e2a8a2b869db64f8dd25f599b0b172ffd",
        "createBranch": "0xf2fc3c829ad9a271a64e6f437fb6f9e8ed0f9770",
        "createMarket": "0x2bcf1482f030d37de85528fb405e9864922d3ba6",
        "eventResolution": "0xfa01e10196e9575835e08d0af12383119b43ea5e",
        "faucets": "0x59997e2d0d9fb15cb4bb3ff41a79e8e3041e817f",
        "forkPenalize": "0x3ffd684dc0ff3c49eb137b8ceb3a6a825bd62a84",
        "forking": "0x970097986e20bb0b833cc3a3df922036ef41d49d",
        "makeReports": "0x89a6a4b5d5ac8b9685421de03d56ebee5e795e00",
        "penalizationCatchup": "0x7381595c6d2a7ffdab11079bcac553476666e4f4",
        "penalizeNotEnoughReports": "0xd76c3939c31d7ae0fde787d52a870135096b6adf",
        "roundTwo": "0x8ebe739b7554567b74e3ee8080ad8a6adf4f2a45",
        "roundTwoPenalize": "0x9c8e25a96e079f3a049c2f3bb4f6dbb9f86d5b99",
        "sendReputation": "0xa2233c69d37367fa3b79db7c41cdb80aae3d84dc",
        "slashRep": "0x63eb2b9bfc9dde48674fa0c7f324d886b3aab4cc",
        "trade": "0x13cef2d86d4024f102e480627239359b5cb7bf52",
        "backstops": "0x20fd8e58b490b499e06033064794544fb1ee5380",
        "branches": "0xf89cf3475034a7d0ad374b1e178a457d3a26b348",
        "cash": "0x9070d08463f94e46b398f76b986107aed42f12e5",
        "consensusData": "0xc97f3ee6aa8a117d9e0126a9e938104ebad02d60",
        "events": "0x284d02f3db4e77466b0a01ca5c639b1505def700",
        "expiringEvents": "0x07cf0d353c50a84e38f96034016fa62bac21f045",
        "fxpFunctions": "0x3e771529be89b856c7427f5c4200facb13f8d72b",
        "info": "0xf994781e3a978e7ff18e465539f5f63b33c66cba",
        "markets": "0xe73f7eaf789ffabe79b5532f303bcf9fdc425515",
        "reporting": "0xb4ce632ae9c2870a4070b31e2adc82db730417a8",
        "trades": "0x07096a7a9584373d79a67c23e6c903075b1385fc"
    },
    "10101": {
        "buyAndSellShares": "0xe4e20e7c0ff5e9830111d4f0950ce0565e61c590",
        "closeMarket": "0x486ebc17cea241b25287663e96a7519d4fc498b1",
        "closeMarketEight": "0xde2aee105f6f77a8633898faff5c2b0bee963047",
        "closeMarketFour": "0xbafe39e8fec55c7ba31641cf0c3e35a1cfb9e5c8",
        "closeMarketOne": "0xac2040d53015d6de158f86a2b29fa41a8c4d7519",
        "closeMarketTwo": "0x5477cb9eb054a57fca2d56b282ba765ff0fdbed2",
        "collectFees": "0xe702442d25c64f72c790634c281c43e6c359d201",
        "completeSets": "0x0fe727fea25a580390240a0861b2d54314cc3212",
        "compositeGetters": "0x0f20f3d63c8063db8fa4ae1fddd4851209fe80e5",
        "consensus": "0xf9a5c4027fefd683daee992cac100c6fb398f204",
        "createBranch": "0x7bb9c606e565f2a0eed830bacb227e8ac6d89de2",
        "createMarket": "0xe59ef2a98c89423a41930a2b9309c00f60570c54",
        "eventResolution": "0xc09a5002cca1c14aaf72589619a6d8fb2855673a",
        "faucets": "0xaf5dc803f4036318a67893dd3f31b25cac477636",
        "forkPenalize": "0x8f858590632b170f41d2ac1e1bcd79917fe95a26",
        "forking": "0x1af69db86085d0b944d6dfc9b1511e4691057270",
        "makeReports": "0xf9e5daf15d0b1c9543f383144d92b57bf50fd9b9",
        "penalizationCatchup": "0xd7e55f745a1fda5a98a4f4a2ec165b02e3444def",
        "penalizeNotEnoughReports": "0x0b8962420e59740ba39a2a400459828de3170f6b",
        "roundTwo": "0x6b0e80245a4af86aa2254f19afe575ff0b71b69d",
        "roundTwoPenalize": "0xf044afd6292f7064258b4ae3db23f9fa46bd9d0d",
        "sendReputation": "0xef9f31d068584d02048c8f357cbf5f4da5af304e",
        "slashRep": "0x2926ec7dbaa3c2354565628cd75686fa48c57903",
        "trade": "0xee7724861914410fbeffee4a772354a501e41272",
        "backstops": "0x52d6d4e29482b06d79d0a9a927601e63a4421b2b",
        "branches": "0x8f6a8ee173b3d351ba53753f5c831bc6e5178487",
        "cash": "0xa17a14a5c6dca8eec92609fc9acdbcc94834db6f",
        "consensusData": "0x2e7207fea6fa6d268d15e714a3b960a71dd414d0",
        "events": "0x7892dd6d5346a671412f8c109a9d66828b06a1b3",
        "expiringEvents": "0x5deb634f2b4216466900d8d7ea7ab10aaf4e4f93",
        "fxpFunctions": "0x1b886b04ceefb8308054e784ec8bd6a68d3b72e9",
        "info": "0x550544613ddd57d08e3e42dd6e85f5a707224c2e",
        "markets": "0xa8d937a6358f3040d89dd9994b80407d15fffb22",
        "reporting": "0x41e5d8693714196bb2d79984774dae41c7770854",
        "trades": "0x456afb1a2721e6926f9c8e621f8d7eaa384cfe39"
    },
    "errors": {
        "0x": "no response or bad input",
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizationCatchup": {
            "-2": "can only be called during the first half of the reporting period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "createSingleEventMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buy": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle-only branch",
            "-0x4": "not enough money or shares"
        },
        "sell": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle only branch",
            "-0x4": "not enough money or shares"
        },
        "trade": {
            "-1": "oracle only branch",
            "-2": "bad trade hash",
            "-3": "trader doesn't exist / own shares in this market",
            "-4": "must buy at least .00000001 in value",
            "10": "insufficient balance"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        }
    }
}
