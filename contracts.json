{
    "2": {
        "buyAndSellShares": "0x0ec86e163e8830af8cca9e800ee563aeff6ab309",
        "closeMarket": "0xca6dff1ff01818b3eed850ee062165db6bd9914e",
        "closeMarketEight": "0xa71724d6cd5e6d133ac93c82816c94eff00d0d55",
        "closeMarketFour": "0x18557450f11188c584424e94a471f7456b7375e0",
        "closeMarketOne": "0xc942cf4f115e4e95b2c0c82a605ca209921b61ca",
        "closeMarketTwo": "0x0ec1fa68ec4b572933e02555af6b9c82f01d6b11",
        "collectFees": "0x9757f7a9f874b8726d71e53e2f3d48297f15eddb",
        "completeSets": "0x24e6f63ba4f786d451ed64dd3e7ac09b93f44952",
        "consensus": "0x2647a36978244df1c13ed5e0be54a6a1d35d0408",
        "createBranch": "0xf68f3978e24ace6fb135eef629f80c1516e29a40",
        "createMarket": "0xbabaa6512b45b1e0f86efe96a95f1cc9590afdf0",
        "eventResolution": "0x672b1bbfb9adb47fb61f27fbbf42d79db0048769",
        "faucets": "0x1f2523916a713015cac8920637e745185f91e6c7",
        "forking": "0x0a23aecb634c1fb0ef75912b2ad36da9d668e1e8",
        "makeReports": "0xda46521f629d0392413fa50e163ca3610ffa466d",
        "penalizeNotEnoughReports": "0x67bf48769a5779be21874b05ac07953644093f22",
        "roundTwo": "0x5b0a8bf950f06860581257b418c57d59203bfb06",
        "sendReputation": "0x28f0252e62cf074dff6eda0394bed6e26e8b5f7b",
        "slashRep": "0x3ef10686a3c77052ccc63d76e944ce41f12c0eb8",
        "trade": "0xd3d0e40ee1aee11c61421b9fb601ee8000feaab9",
        "backstops": "0xdcd5a4fb262b90d8e26015f7d3c201f965e9333d",
        "branches": "0x835cd5532e7388f6aa46556787d7fa40584fc587",
        "cash": "0x9019de9fcc25961830bf341d3aef75bf07df906f",
        "events": "0x607b593f8c79b12320589f488b9725fb30c6db8e",
        "expiringEvents": "0xc4f7a8b2254103e163d7092192d680714cac9ea2",
        "fxpFunctions": "0xa671b773913cdd2d9b734451fc5e920531b70b1a",
        "info": "0xb6380a3161ee463ddaa0e1e7596190237ff52b80",
        "markets": "0x71acf422272bb293b1f55167df08d4b603bcdbdc",
        "reporting": "0x287fffe98fb1ff1dd916fb94ce20b159a0271b25",
        "trades": "0xc45bf3c05e04204f43ab2cbae3952c6a71f7f60b"
    },
    "10101": {
        "buyAndSellShares": "0x2be98c7c03546964a8a9d0fc5aadfd914dc114bd",
        "closeMarket": "0x0869aeb0abee951ffc4cc451f49ffd82f7b2a505",
        "closeMarketEight": "0x80aeb8c1406126cac7249f01aff7965da26e2db5",
        "closeMarketFour": "0xd9e37e7b5d464e3d6082ba943abdc0b653e2d649",
        "closeMarketOne": "0x9945188496f220e92059d398cd8caaf6a0d7d7b7",
        "closeMarketTwo": "0xb1f966e5019b581c87d46ca75efb810ee075c054",
        "collectFees": "0x06038f669b3af72ec94065a95df22d130ffdee5a",
        "completeSets": "0x750893693f57b4f64b27ea06945ef83ab93fab2b",
        "consensus": "0x678f39ac82f2384c38340fbe7ebb8482f4c33093",
        "createBranch": "0xb4b849f86d4b1bfe8973d9eeeb49560f557fe54d",
        "createMarket": "0x625d3288e1884434e40c968782165532ba361a5b",
        "eventResolution": "0xdf85e05a45219d78de67c60c07f5f2c99caf08c2",
        "faucets": "0xe156e04160ce914d8ca968db5d7cf4d8681c2f66",
        "forking": "0x4d917d7d0b06bae9dec7d96318f07a4806ba7ecc",
        "makeReports": "0xf383bdfe79a434fae18897ac8333fa1aa5ada720",
        "penalizeNotEnoughReports": "0xcf3c27e7e232140d99b7ab335d30b44086194a80",
        "roundTwo": "0x28163b3464fc522458d0e725005bc29bdfc17863",
        "sendReputation": "0x376b44194ed1be2273e82cc84aab1f29e765514e",
        "slashRep": "0x9c2625449ca57a81cfade24a835cd99dd45c9ef5",
        "trade": "0x788d54b2feac910d12fb193c597dbd7111f5d7b1",
        "backstops": "0x2a0a27bfb4e9c75db6bfd4849c01f091a369eaf4",
        "branches": "0x06f1a2441a1bc0faa6216f51e361b0ed6e2d87c3",
        "cash": "0x526e2e29ae51e9161ec27407e1626c1666efad28",
        "events": "0x46e690f00623b3eaf033bff914d9e7166c3de5df",
        "expiringEvents": "0xa3b4059c86b899c7f0b51301cb1ce2bfbd0f334f",
        "fxpFunctions": "0x3c2c06a91035e8eb9684e0c7131f2405768b31aa",
        "info": "0x7eb5dab10be0aaab4ac9991baf9595239b6e6663",
        "markets": "0x2fa7c3e9fd724e3852aadff7ccf476079a0a0f94",
        "reporting": "0xf3063911c342bf57728fabd594c1dd05d6c5f962",
        "trades": "0x76329729d283bbc11a92fdf291901dec2dfd43cf"
    },
    "errors": {
        "0x": "no response or bad input",
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizationCatchup": {
            "-2": "can only be called during the first half of the reporting period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "createSingleEventMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buy": {
            "-1": "amount/price bad or no market",
            "-2": "oracle-only branch",
            "-4": "not enough money or shares"
        },
        "sell": {
            "-1": "amount/price bad or no market",
            "-2": "oracle only branch",
            "-4": "not enough money or shares"
        },
        "trade": {
            "-1": "oracle only branch",
            "-2": "bad trade hash",
            "-3": "trader doesn't exist / own shares in this market",
            "-4": "must buy at least .00000001 in value",
            "10": "insufficient balance"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        }
    }
}
