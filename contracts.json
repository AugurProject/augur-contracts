{
    "2": {
        "buyAndSellShares": "0x84c9426dfabdd67f5971e01aa670108b3d484897",
        "closeMarket": "0x8fa98ce5640bf3d9dfb39d6e1e3df53050170f2d",
        "closeMarketEight": "0x49c6a06be22ae1f9f9f2640e3758520368a6a36f",
        "closeMarketFour": "0x48bd90daffb8ff7e1271f4bcdfeea9b14f0bff29",
        "closeMarketOne": "0x957b740ba2f080290af77844fe38950cc64cc71c",
        "closeMarketTwo": "0x9f42c11b0427e7ba19f2bc27ea38107966e45335",
        "consensus": "0xf1e2c34c20a689565a3cea832b318d1c616c0bcb",
        "createBranch": "0x4ea95d7126b56b1e7f6fc191c4438571fdc39b4c",
        "createEvent": "0x6cfb5f9c58e245884c547c59262a8f3ea4154e52",
        "createMarket": "0x698ed96ea769d43820eb8f7b153e48b4495b6d88",
        "createSingleEventMarket": "0x6f5452dca9bbfe8ac9151dd0e67c8dde8b1c6572",
        "eventResolution": "0x42d42ad6aeebfd1e936a78d56a98b40018b642c7",
        "faucets": "0x68171933b55d3d3116740e1f05db7963c3696992",
        "makeReports": "0x5cc23802250ef94563567ffbb5469be0625e1997",
        "orderBook": "0x434038b04687235092832efcca183d1a681ef86c",
        "ramble": "0xf87750a16a769e50b5dab391db757668c8fb7c00",
        "sendReputation": "0xeff47347768f55b9a597dd547e8647491471a04f",
        "transferShares": "0xe172bce50e213c7e60879a6ed38f84b2391fa282",
        "branches": "0x8efb14b331eb71b1e76004bcc648877e9b89ccc9",
        "cash": "0xf609fe70f96ea7a18eb3702716c71652778bab92",
        "events": "0xdeb64524a59b99c9a9459ac091f9b9a4e8a3dfa1",
        "expiringEvents": "0x3c5ba3bbfc12f1dc647051f3656b0b27c024b69d",
        "fxpFunctions": "0x234375b8c8cd67078c871be1be1ca5472e313d57",
        "info": "0xf5c5720bf4122774ce081682c24ad43e495d4a30",
        "markets": "0x62a699cee4007bb3b850e6597e747cfedbe2e1e4",
        "reporting": "0xa33d98c6a53e42110ccfaaba42217726e6b46735"
    },
    "7": {
        "buyAndSellShares": "0x271ee62a8577a97d648c4b4eb3a0e56306f711c1",
        "closeMarket": "0x7a2e05c795fbf585af34cebe760602b8425846dd",
        "closeMarketEight": "0x66021d8b17cd9b90dc53012ba6c8cec8aaef2d1b",
        "closeMarketFour": "0xfb5c088e0d2b8400800c61ac0d69cfd11261401c",
        "closeMarketOne": "0xbfaa24839dec3961c010c4831709bdecbac382f5",
        "closeMarketTwo": "0x8bb3073196dbdbf425157b3d83156f18c5c0e776",
        "consensus": "0xc4d92584ea34be5dd2b916c464e55ec9b4bd1f8f",
        "createBranch": "0xb005839c49a328850bb22359bb66f9ba1a0f9994",
        "createEvent": "0x0c532debb932ddb5d07eb957bf8ff5975e932ca3",
        "createMarket": "0x26ff0f6452673ff11dd8497491b271a18c76990e",
        "createSingleEventMarket": "0x6f5452dca9bbfe8ac9151dd0e67c8dde8b1c6572",
        "eventResolution": "0xd399af9820be7ddda37c7d85e701bf8ee2337739",
        "faucets": "0x94bab6be74df76e996b20329dff2ec39d3013dc3",
        "makeReports": "0x0b7c36b76208e2c968b04dce0658c03c27bfdc00",
        "orderBook": "0xf86bbf277ae88a8b50ae90d97e1aafb1390e2984",
        "ramble": "0x2258a25e503b19dc3d2c2fdc9ca57a1d5985e30c",
        "sendReputation": "0x7e049a60e0106d263ffd0a60bcfbf4f63dd1f2a4",
        "transferShares": "0x40343b107ef5dee9c240ff5f1f87f0afb6f709dc",
        "branches": "0x44cecf2528fbc502f31a58cfce99b8bae992b9c4",
        "cash": "0x9ef25450d88c82118a3395f57e7a29931305ac6d",
        "events": "0xa95fa8fe1f544d80afa29ffb0a959116c842e110",
        "expiringEvents": "0xad225235b9da03bbfda4fb79bf4e2356296e7d7f",
        "fxpFunctions": "0xa1a240f9f505aa06e9eabe405ffab14689dfdda3",
        "info": "0x087785682381a1316303efb19d1d450562603fca",
        "markets": "0xfd0f6987c7042e867db9c1dae6e681b2c3648de2",
        "reporting": "0x9d358fee98edb880e6a4549e21f4ab66dfcadfa7"
    },
    "10101": {
        "buyAndSellShares": "0x1305fd4a21ab8623f306e885e3ac76337340a9f3",
        "closeMarket": "0x6cc483868480b14130982467f17ca562390b87d0",
        "closeMarketEight": "0x86085657a1b70b0da1be8c010ee5aefb240deffd",
        "closeMarketFour": "0x0c0544c1d9d31df46599e972ae2fc0ad985d98b6",
        "closeMarketOne": "0x529c2141b536eb6f760979aa69f3fe2efd94b637",
        "closeMarketTwo": "0xf6163ea76d6944f17ef209c63adaf087e4f7094e",
        "consensus": "0xe5ada709b8aea7a456fcfb5bed68b8f4442c9d00",
        "createBranch": "0x7fc7a904c3895bb62c007eb3e5be8461cf7f17f8",
        "createEvent": "0xa657d97ab6b5956b2a906769cff0daa550db47f8",
        "createMarket": "0x275ea6bfded0e1a06fb6310e941d2ef9e6c08edc",
        "createSingleEventMarket": "0x27263db4a2e8f03a72529f3f844ccf546bf57743",
        "eventResolution": "0x9bc5ece0a4e249f7ba3f0e5874916c62f434241b",
        "faucets": "0x6f478e5116aab344be7e7a06bb40f5122191d843",
        "makeReports": "0x1c98a64b4af0c2324c28110b4b6836ad4070d6f8",
        "ramble": "0x05fda9770e66b781b269151fd68f4c6c3acc0ec7",
        "sendReputation": "0x8ed904172ba9491352960a7e64a6eace97e78079",
        "transferShares": "0x273daa6c386d68474bf2aafa271a77450fdea14f",
        "branches": "0xf812d4ce3508afadc16cfbc089fc3d34bb9bd5cf",
        "cash": "0x0025a1cb2e3380388d30aa36dc7a4139226abb7a",
        "events": "0x46b93d798bf5001e6e57a1d1ad671d71db61a12d",
        "expiringEvents": "0x1aab6f6e25576c802f4053f1f2907a22b4f48034",
        "fxpFunctions": "0xa0a0fc3eec1036e40eae32ddb6b7682e312f62ac",
        "info": "0xeb711aa4783bd343fcc359eba369f2ae7c44450b",
        "markets": "0x38b333b05ef75eeda5648defdb0d17959361d961",
        "reporting": "0xe2e219679e3763e4e9f98480f860a846efa7e30d"
    },
    "errors": {
        "0x": "no response or bad input",
        "getSimulatedBuy": {
            "-2": "cost updating error (did you enter a valid quantity?)"
        },
        "getSimulatedSell": {
            "-2": "cost updating error (did you enter a valid quantity?)"
        },
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "claimProceeds": {
            "0": "reporting not done",
            "-1": "trader doesn't exist"
        },
        "report": {
            "0": "could not set reporter ballot",
            "-1": "report length does not match number of expiring events",
            "-2": "voting period expired",
            "-3": "incorrect hash"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "checkReportValidity": {
            "-1": "report isn't long enough",
            "-2": "reporter doesn't exist, voting period is over, or voting period hasn't started yet"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buyShares": {
            "-1": "invalid outcome or trading closed",
            "-2": "entered a -amt of shares",
            "-3": "not enough money / limit order too low",
            "-4": "invalid outcome",
            "-5": "bad commitment or no commitment",
            "-6": "oracle only branch, no trading"
        },
        "sellShares": {
            "-1": "invalid outcome, trading closed, or you haven't traded in this market",
            "-2": "entered a -amt of shares",
            "-3": "you own no shares / limit price too high",
            "-5": "bad commitment or no commitment",
            "-6": "oracle only branch, no trading"
        },
        "WHISPER_POST_FAILED": {
            "error": 65,
            "message": "could not post message to whisper"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "IPFS_ADD_FAILURE": {
            "error": 506,
            "message": "files could not be added to IPFS"
        },
        "IPFS_GET_FAILURE": {
            "error": 507,
            "message": "could not retrieve file from IPFS"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        },
        "CHECK_ORDER_BOOK_FAILED": {
            "error": 710,
            "message": "could not check order book using current prices"
        }
    }
}