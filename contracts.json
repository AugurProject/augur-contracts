{
    "2": {
        "buyAndSellShares": "0x848a4f71af2e9b57ecd8c1d3f99d470e2c73eba0",
        "closeMarket": "0xe6474e85765d1676bafedb09b8c79bea7bd40dcf",
        "closeMarketEight": "0x36c4e967b672b81c505fd677768f76969b139f23",
        "closeMarketFour": "0x739dcfef11db3f02638b205f3043504001452b30",
        "closeMarketOne": "0x8ce76311414e7ba3f5d0b8b5b34d262e760ecc24",
        "closeMarketTwo": "0xcd29dddf5ee743c458d16d8fae338834c9dd5c07",
        "collectFees": "0xcc36d11d39b0df7303163282855b67c8614cc9b6",
        "completeSets": "0x227a05d6a894e87103fa15b180e61f4a90c944f0",
        "consensus": "0xdb03844ecc9b9cb26af853b07fea7199b5590665",
        "createBranch": "0x45b70449612454df986ed62873cbfb81889abaca",
        "createMarket": "0x902d91cc483c77da3be9b62b5060314887fb99d5",
        "eventResolution": "0x9bb51b5887354e66cb2ab2804bc875e65a31ccb5",
        "faucets": "0x78954c7be678a2ebd369332860cdcbefb1753488",
        "makeReports": "0x45ec31e7768d81502bf9c022ad7fc4d27324838b",
        "penalizeNotEnoughReports": "0x9b066e999b90d78caf5f9a6eaa8a84e36d4a8e51",
        "roundTwo": "0x00dac9a399eafc564ddba8e948d99ab13ed6e6e3",
        "sendReputation": "0x20364b3ec5d1ef6435b68bb3eaf0752b778b8909",
        "slashRep": "0xf26f89c68fffd5f06db8fb23c015189f1e0fd648",
        "trade": "0x6818102e23a0f35e31b61f0ad84df66ad0996824",
        "backstops": "0xea9e799a1bbf2b88090a4a4f39ef44df16e31bdf",
        "branches": "0x65c474942e08998c423b0574f45226d4aac2db14",
        "cash": "0xbd272e493163dcfe1726cecdb14c85942ebba648",
        "events": "0x7e115a8fdcdc564a3313a16d3308e9a2ccf8fce9",
        "expiringEvents": "0x25b9da0d8f2a33fae066e3e2a5a97bdd88b41bbf",
        "fxpFunctions": "0xf641656dfeae64f3cdc4bdaf75d9e6b131135968",
        "info": "0x254d730690f461dc6048c8fd4d9bf49f9fc39829",
        "markets": "0x6428dec6166f621e38ebd24945645cef1b9127cf",
        "reporting": "0x078f90d721992b617a2c65f17340b05add6f9552",
        "trades": "0xb8c254877dd025d04bb760e7b738e1219dbc2708"
    },
    "10101": {
        "buyAndSellShares": "0x4862bd943c1afd0a783f817787dca92e5b17fad1",
        "closeMarket": "0x1b946ef74add6dd796da8474db6786216bfd42a9",
        "closeMarketEight": "0x967ec28d79f2641528da323e2d3ff00189a52501",
        "closeMarketFour": "0xafd0e137f7d7639d9eeb3de060c30274308c0525",
        "closeMarketOne": "0x991b9c0a666fa7d04e8546862c27c0dd2b313274",
        "closeMarketTwo": "0x1de42e82b38a9ddb1840321498725302f8fc263c",
        "collectFees": "0x4472317bdb8f0c23df3e492f26594a935095c227",
        "completeSets": "0x9bdb3bf31fa503f38c68b8ebf1cf2fb0b7950bec",
        "consensus": "0xfdef354a1feb391bcaf6598bfa2a6b31ed7afb49",
        "createBranch": "0xd6888d5f914c775807b90c239a41110c18700fd7",
        "createEvent": "0x12054fe707275b987ec754913eb55bccedb421c0",
        "createMarket": "0x224165e871b332d45c50ad089d7d98bbe5787908",
        "createSingleEventMarket": "0x592f6b0341c4dbe3915aad8df8af308b2a75283c",
        "eventResolution": "0x5858941e8ef133e547e6483d45dff63c87016999",
        "faucets": "0x53dde58daced9e3a7bf3577ac7228547eabded77",
        "makeReports": "0x621fea4c7b5626ebac9fec748283070b2b30c00a",
        "penalizeNotEnoughReports": "0xb6218544835eb946bb30d84cbc8622f8628e5d4d",
        "roundTwo": "0x74c3ecd32a4134ac59e5518b7b2ff08d3ea50b78",
        "sendReputation": "0x3bc15fc93b2f646f9916aee3f8c12a7261a8ff8e",
        "slashRep": "0x215af0bf164138b90f418e19d25c89a95bc6a2a2",
        "trade": "0xfb306122b2113664de24a34bb25f3f072187e0a2",
        "backstops": "0x123afcad1bfcdd63274eca3e09110228a7ab1b36",
        "branches": "0xbd48e61312b2757ed6555f0bc919439fa3d19567",
        "cash": "0xc15c4d0478440291ef56a6934c031d1effa7c996",
        "events": "0x2fd2953f436d16a6eb0e5624bbe9c8920513bff7",
        "expiringEvents": "0xcf3c8d2953b8f02bea0bff3db9929361962aba06",
        "fxpFunctions": "0xcb0c565165a1cca856da55036214d42e9726e201",
        "info": "0x24db29b9b923d2e480fb8d633dc72f718e88165e",
        "markets": "0x337b3d3f4cd75776e591a8aa91236d1329f4d6de",
        "reporting": "0xa832bea402b452123d0a931618b24b199b1c4694",
        "trades": "0x0250e15301e71fa05cd4bdd4cf49ef71f98f090c"
    },
    "errors": {
        "0x": "no response or bad input",
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "claimProceeds": {
            "0": "reporting not done",
            "-1": "trader doesn't exist"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizationCatchup": {
            "-2": "can only be called during the first half of the reporting period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "createSingleEventMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "WHISPER_POST_FAILED": {
            "error": 65,
            "message": "could not post message to whisper"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        },
        "CHECK_ORDER_BOOK_FAILED": {
            "error": 710,
            "message": "could not check order book using current prices"
        }
    }
}
