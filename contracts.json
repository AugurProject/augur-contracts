{
    "2": {
        "buyAndSellShares": "0x1af0d76463bd04d61acaa3ecce2dd76d888f2a62",
        "closeMarket": "0xfc9a1aa49c4f8bf8a8a62d2108230c88dd694abf",
        "closeMarketEight": "0x5e87ce160a0bd6f9118a8f6d302be3996cc548a0",
        "closeMarketFour": "0x925a58dd604aedae13ec38e52656951196f0972c",
        "closeMarketOne": "0xdbe8554632236a1227b3ae6ad0ed845a24ab14b5",
        "closeMarketTwo": "0xb7b2ea922576589775ed6dd16259f5b2be412db8",
        "collectFees": "0x444551cb9f366a6dcb2a2ea8195b6cd23b9254b9",
        "completeSets": "0xbbfaca17af649355b495bd1d9d1a868f79e1db1c",
        "consensus": "0xeb485fadd10929db477a2178c1dcf0c316d192f2",
        "createBranch": "0xdfe3a8d15b961ba390432efda62b803eb8c9236e",
        "createMarket": "0x4653bdc46f1440707a2dbfa89a1b3d22c55342cb",
        "eventResolution": "0xf07c65ef2543dec8e3b75cf5d1866a967e76340a",
        "faucets": "0x532c107ac97b2fc48503c16a0e9931baccfe3149",
        "forking": "0xadf25ff2a60ad2ab876f7bcc212a29098404bc20",
        "makeReports": "0xff4bc011564a6ab00f5b795ea86533b31a7c0ea2",
        "penalizeNotEnoughReports": "0x342c5f401271a97b9f488859a6ce51b64ba8e0e7",
        "roundTwo": "0xedcedb82bcf01a4472cf14e379e9c200a3c78560",
        "sendReputation": "0xb74e159ecead0f4a666b920b27388a810f9c12c5",
        "slashRep": "0x15187fb1e21c9c808cf888c457f8e25a00d6c42a",
        "trade": "0x53a30c5d96d11e061ab8f7754545b2f0e930b319",
        "backstops": "0x243a5bb4903fdc52da6c001ca1ff4a7d55e78ef4",
        "branches": "0xe556780b7365bdf861c2366854410b6a61fbf39d",
        "cash": "0x042951544933052a6316c127cb9c770a791a073d",
        "events": "0xc77fff92edb265cdb713d2bbb1ff48f4aa2f0b09",
        "expiringEvents": "0x578f98a81bcd1701b145ffe14b7d3b1ba92f1925",
        "fxpFunctions": "0x22f8fdeb1156cad0ade3e1f7d1565eabd2496a1d",
        "info": "0xa14ce93ffc862143ed1a0e688cbb813362b0b075",
        "markets": "0x0acaff246f8fa04024ce25b8befa1f3a41277250",
        "reporting": "0x275b6a226c734ca4c710e24b051e9ec1a8b03bcf",
        "trades": "0x2a03116b60f75545581731b784df4b838a723a67"
    },
    "10101": {
        "buyAndSellShares": "0xe5b327630cfa7f4b2324f9066c897dceecfd88a3",
        "closeMarket": "0x7d4b581a0868204b7481c316b430a97fd292a2fb",
        "closeMarketEight": "0x81a7621e9a286d061b3dea040888a51c96693b1c",
        "closeMarketFour": "0xc21cfa6688dbfd2eca2548d894aa55fd0bbf1c7e",
        "closeMarketOne": "0xabe47f122a496a732d6c4b38b3ca376d597d75dd",
        "closeMarketTwo": "0x77c424f86a1b80f1e303d1c2651acd6aba653cb6",
        "collectFees": "0xc1c4e2f32e4b84a60b8b7983b6356af4269aab79",
        "completeSets": "0x5069d883e31429c6dd1325d961f443007747c7a2",
        "consensus": "0x35152caa07026203a1add680771afb690d872d7d",
        "createBranch": "0xd15a6cfc462ae76b9ec590cab8b34bfa8e1302d7",
        "createMarket": "0xcd6c7bc634257f82903b182142aae7156d72a200",
        "eventResolution": "0x9308cf21b5a11f182f9707ca284bbb71bb84f893",
        "faucets": "0x70a893eb9569041e97a3787f0c76a1eb6378d8b2",
        "forking": "0x8c19616de17acdfbc933b99d9f529a689d22098f",
        "makeReports": "0x52ccb0490bc81a2ae363fccbb2b367bca546cec7",
        "penalizeNotEnoughReports": "0x3f3276849a878a176b2f02dd48a483e8182a49e4",
        "roundTwo": "0x5f67ab9ff79be97b27ac8f26ef9f4b429b82e2df",
        "sendReputation": "0x6c4c9fa11d6d8ed2c7a08ddcf4d4654c85194f68",
        "slashRep": "0x482c57abdce592b39434e3f619ffc3db62ab6d01",
        "trade": "0x8caf2c0ce7cdc2e81b58f74322cefdef440b3f8d",
        "backstops": "0x60cb05deb51f92ee25ce99f67181ecaeb0b743ea",
        "branches": "0x708fdfe18bf28afe861a69e95419d183ace003eb",
        "cash": "0x8a4e2993a9972ee035453bb5674816fc3a698718",
        "events": "0x0fbddb6bfb81c8d0965a894567cf4061446072c2",
        "expiringEvents": "0xbd19195b9e8a2d8ed14fc3a2823856b5c16f7f55",
        "fxpFunctions": "0xa34c9f6fc047cea795f69b34a063d32e6cb6288c",
        "info": "0xe4714fcbdcdba49629bc408183ef40d120700b8d",
        "markets": "0x4a61f3db785f1e2a23ffefeafaceeef2df551667",
        "reporting": "0x8f2c2267687cb0f047b28a1b6f945da6e101a0d7",
        "trades": "0x9fe69262bbaa47f013b7dbd6ca5f01e17446c645"
    },
    "errors": {
        "0x": "no response or bad input",
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizationCatchup": {
            "-2": "can only be called during the first half of the reporting period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "createSingleEventMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buy": {
            "-1": "amount/price bad or no market",
            "-2": "oracle-only branch",
            "-4": "not enough money or shares"
        },
        "sell": {
            "-1": "amount/price bad or no market",
            "-2": "oracle only branch",
            "-4": "not enough money or shares"
        },
        "trade": {
            "-1": "oracle only branch",
            "-2": "bad trade hash",
            "-3": "trader doesn't exist / own shares in this market",
            "-4": "must buy at least .00000001 in value",
            "10": "insufficient balance"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        }
    }
}
