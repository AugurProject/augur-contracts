{
    "2": {
        "buyAndSellShares": "0xe8a69343f1d7cc1a869707340caf1401fb81b232",
        "closeMarket": "0x2b4b368e0a6240670e1f3f24b34c9639052d7668",
        "closeMarketEight": "0x07a3f371365211154698e4e6ba4893ade296df81",
        "closeMarketFour": "0x0c492204e21192a595a0e50649f083319beab322",
        "closeMarketOne": "0x61a193b512e3353b16424aea975f4588d8131dae",
        "closeMarketTwo": "0x16181875465db0498afaf9e779349fe0fbb7bddc",
        "collectFees": "0x945f4c66e2900f36af3670066db9e604e350475f",
        "completeSets": "0x06afc59c4b80fc24a8dc0be52874f2ab9db5118c",
        "compositeGetters": "0x3fecc845fa5e162f8a9ec0265eda6f816d1ead86",
        "consensus": "0xd52c1c6981b5a17d37a3fe52a6dacb5fccbc61dc",
        "createBranch": "0xb322483d9b39ada7c924a764dbe5924df104a47c",
        "createMarket": "0x80e832f6b26c0c478261f755bf390e7facaa4d5c",
        "eventResolution": "0xb77ae2d8fb80bd0f44ff35a04e867a8dcdf9e95c",
        "faucets": "0x7779d56ec1c3bdb6d5d08d8a56330e3f2548aa76",
        "forkPenalize": "0xfcb196b6c790983210b880b5302bc2d79e7ef88f",
        "forking": "0x3c50214abffac06871456c8979cfbfed6a682921",
        "makeReports": "0x15591b54ab17ae8fb421a994bbcb551cdbc830e6",
        "penalizationCatchup": "0x7e129be52f3306e006a047259ea5414cf37d899a",
        "penalizeNotEnoughReports": "0x6ade70c1af99cc7f56ee77a13e839be74113f1c0",
        "roundTwo": "0x2934cb55a042917d7d25dab281e97e9d22d3b889",
        "roundTwoPenalize": "0x8c95874fa0f93771e4ea42574b37221c9d6b50d6",
        "sendReputation": "0x3223ab5b670a9d7709c993e6eecd1ecd45acbc71",
        "slashRep": "0xd06080e64f239f9ae6143a4851479b4cb66cfa31",
        "trade": "0x582a53b32a394b2fff72aee7f2f66ca605fd83cd",
        "backstops": "0xb0a3c91805f2a046d11b535f75f9161080d55658",
        "branches": "0xbbf6c7b2879ecbd1efb8e2eb0a57d5ddb7392591",
        "cash": "0x21bfae3468d9d56b6ec22ceec3484d5eb2c6e369",
        "consensusData": "0xb912745dbf75e38a95fa1500adb2769f70360792",
        "events": "0xf09a6440a9295ef4fff288c0825e36ebc602f9a3",
        "expiringEvents": "0x70fa60c1d4b4370388db171fee466de0cfb769b2",
        "fxpFunctions": "0xc978e19ded2bf1256b8a3eee4864c66d4bfde1bc",
        "info": "0x4eb401fecbf4f5964cb9dbbbbb7d29502d52e141",
        "markets": "0xcd6747fcc76cba7573103b5dfb4c5006f114debe",
        "reporting": "0x248c2117467d95689cdfb790d69fa33f1d76f1af",
        "trades": "0x56530da7b85cf18012855f21a93873e141fdfec4"
    },
    "10101": {
        "buyAndSellShares": "0x5c388823ed34d432291c6d19f565abdf3a4ab173",
        "closeMarket": "0x323f196006b880ffe58232c3d3995715aedfbbd3",
        "closeMarketEight": "0xf96f73daff5216c1b3a5399674d5f08ab5d00677",
        "closeMarketFour": "0x320a2efbf1fe71900169c3077c85067ed4ba30c2",
        "closeMarketOne": "0x9d03429b195e86eeed976a79e5ba666ed2899fd3",
        "closeMarketTwo": "0xdee8ba48e445ba70e92726af5335dd44295dd0fd",
        "collectFees": "0xdc1c605aa1c06dc5e60618560d26c77787f6b027",
        "completeSets": "0x9b38992f85d52316bab41a283430b06f85ded977",
        "compositeGetters": "0x2fc54625530bb7a0eb840c15bd3329b104fb4515",
        "consensus": "0x3b4e65b8fa09a570d41d9f5f04cf3b2282738851",
        "createBranch": "0x9865b08dda7423862964ed33c6771baf8ccd29c5",
        "createMarket": "0xbb17fbecdd64233a3c70d2829eb4a8abbfa0615e",
        "eventResolution": "0x57ce48c476ac801967f38eebf8d64711effefd76",
        "faucets": "0x3fc05b39dd449c0361359f1c491820f9afb35f66",
        "forkPenalize": "0x5f8dad65c9174e272500aa64bcb9ca2785e71cad",
        "forking": "0xb7851f4122d07d42abcc7a8d4cd5d9384c2f2f8b",
        "makeReports": "0x2fcab7efcb9c1b8c0f31aa621bd82ef6a8ae454d",
        "penalizationCatchup": "0x80a82ca064fe69cb3805bb0e5995ddcc413f37c2",
        "penalizeNotEnoughReports": "0x54c4212395bf0e6e98340cab67779a93d63e6c2b",
        "roundTwo": "0x0ebb446f678f0524be8c764e2dd7fa7907febfdd",
        "roundTwoPenalize": "0xcee858dc2011db5e4ceb8c6e25e80d6038a5d96d",
        "sendReputation": "0x0ac08b2e45c671d82212df86d5a73980d193231e",
        "slashRep": "0x66dc445307e2dc2f82c90b5c6dfb4c0e5a018bc4",
        "trade": "0x20fb0a7ccc66e7bfe3d231bca4be985e3d809d2f",
        "backstops": "0x2a1bac7c3e13bfd5d9df2103363115146022b531",
        "branches": "0x18811daedcb3bac4747ef0ff45f705689c9264c0",
        "cash": "0x9faaf4f58adc18e6968bdacab392d7e28d139443",
        "consensusData": "0x1e1ed45192c106d8b9313b5e37b4887d915098ab",
        "events": "0xe1dcfe836d8bf08a839efac43106472a596ca81a",
        "expiringEvents": "0xf6a37f19c30bd2950d634e8bbbe7b3977aa3d4bd",
        "fxpFunctions": "0x4fdc1b564f76e4f1755736c8358301d7955accbb",
        "info": "0x1e6c2d4184271eafb1e0e84aceb4d57d9550b1ac",
        "markets": "0x210b11e4050ca04790b3eab61af7815c130cea98",
        "reporting": "0x19aaecfc471ea12e2d515c55e21948cb761d6a71",
        "trades": "0x81bf8f6a711985b8f3116e4bad3efc3b3da57914"
    },
    "errors": {
        "0x": "no response or bad input",
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizationCatchup": {
            "-2": "can only be called during the first half of the reporting period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "createSingleEventMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buy": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle-only branch",
            "-0x4": "not enough money or shares"
        },
        "sell": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle only branch",
            "-0x4": "not enough money or shares"
        },
        "trade": {
            "-1": "oracle only branch",
            "-2": "bad trade hash",
            "-3": "trader doesn't exist / own shares in this market",
            "-4": "must buy at least .00000001 in value",
            "10": "insufficient balance"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        }
    }
}
