{
    "2": {
        "buyAndSellShares": "0x47be35dcdd588ffcd30d6aaee5ed95630fecf918",
        "closeMarket": "0xb50a2e85c68c0d4fe04759e4dc3f1f119e765707",
        "closeMarketEight": "0xf1b39ec03b64b7c839f551413c0e68c72bdc0131",
        "closeMarketFour": "0x9489d1c57cbe9d305540f7c40922b8283f9be089",
        "closeMarketOne": "0xdd67ee69069db5a02d18a2a6077e30911c45dd1e",
        "closeMarketTwo": "0x0d6c2fab4529c275ce0f1ada01ea025f9ad6c9f8",
        "collectFees": "0x8e16c43eadcb81a5cceafe8b2d693dbea4976ab0",
        "completeSets": "0x02102aadb33d5af80cb02c15701f791f2b82b0b3",
        "compositeGetters": "0xa1b8f9226b884c501a20b3bf830bf39073a50147",
        "consensus": "0x13af9740aa6bfb1c16b7be01374e4021b281c01c",
        "createBranch": "0xe26e56cd96da49d19fe7471311af2e4ba4129df7",
        "createMarket": "0x0f5512956b1bf9f03a461783495b647f05bea520",
        "eventResolution": "0x36d25f482147a6e718926ac4f25ee00397f2204d",
        "faucets": "0x190b20c240c5ae210fd1fedc81297311130cf9cd",
        "forkPenalize": "0x9775fbce42d486f0feefa41a4e3c434aa138d3ad",
        "forking": "0x0cf58aea8687f4e178f53cd64aed92b10eeac060",
        "makeReports": "0xd40a4b52b53c349cb17e5703ae8099b14a5283b1",
        "penalizationCatchup": "0x89cb0c7b0b82102c9fcfc24dcda6422ea9414956",
        "penalizeNotEnoughReports": "0x51f96d1b71daa11c1dcf00a48b37fb34c376b483",
        "roundTwo": "0xf9d82d9c5ca5362967625debaf020d8694213ef2",
        "roundTwoPenalize": "0xc9a545fafdd2c6849c2186bab01aa2a5e27e7c70",
        "sendReputation": "0x7d82274b758b015867fc12325ff3629302c4187b",
        "slashRep": "0xb02033249eddd36a8b86a1cdaa8a18414f97e7a9",
        "trade": "0x5827c3f05226f0934e67050b3b89f8e22f03f8f4",
        "backstops": "0xc7da2eafd342f597d4434673b14f14ae3f41d942",
        "branches": "0x9678efb1b05634a3968c0c1d642eef4635ef371e",
        "cash": "0xaf9c171a9e906d3231d8cf1b765fd774bfb1d3c9",
        "consensusData": "0x5aff5b8d50f2c2d96c9e3875a3da5d718a012194",
        "events": "0x25f1033d80a4f5581cbef5a2ce200e7059f3e687",
        "expiringEvents": "0x97111bceb9b7462820d2de9b59f409e8d75288cd",
        "fxpFunctions": "0x39add9c7f286f200f82a44aec9c5118bda519c8e",
        "info": "0xfa9b00d83254ba41c284de003097f77a31072495",
        "markets": "0x535555a4fa1b9a016d776f0740a0df365a095ee3",
        "reporting": "0x076447a835e53e1bb5c2ca945cd49f47c5ac83f0",
        "trades": "0x10552e258ba9b287a89c4e9917a9a359a864e666"
    },
    "10101": {
        "buyAndSellShares": "0xc7ef1cdfcae05c9c778e3a3220193f5c052e9550",
        "closeMarket": "0x6fb0df83b9031eb15dc265b96b069d131daedb4f",
        "closeMarketEight": "0xc3861b66ac4b788dc1894766ff7b9911b2e5f71a",
        "closeMarketFour": "0xf8dd783865db45a516f337a593a963fb48521e9f",
        "closeMarketOne": "0xec7f828b36932375e002ef8fd89836ca0f89cd02",
        "closeMarketTwo": "0x7ba9727bd11556abe84d577da769c3c654485b91",
        "collectFees": "0xa9d19963a10b6cd6c4ccf93990aa27d09269e704",
        "completeSets": "0x470f9a8742c7ae216a61cd7c5c639495929c42cb",
        "compositeGetters": "0x0542deac8debbc9cdf1d16ddadd75b3464bee084",
        "consensus": "0xd5e6b60100f91a7b193e1eb99229cb6ad053b589",
        "createBranch": "0xcfe7ff3615e407b03aee9be253575e690bc80a17",
        "createMarket": "0xfa0b869cc786e0c25ce1f718c49b942ca5a55817",
        "eventResolution": "0x5d33ae07b32e421d0edaebf248e981d642eb445e",
        "faucets": "0x383a68ff0e60deed20c552ea4490e39ca41aa56a",
        "forkPenalize": "0x3f28e883ea95a17bea09f90c14275ce1f25f645b",
        "forking": "0x405b11e09ee3123ccadae39d64042b79643eed5c",
        "makeReports": "0x817d292f4dae36886c2a1a34c1dd79db621d8210",
        "penalizationCatchup": "0x880717a38207a7f0bd69f2ca6c3ae6da45016ae7",
        "penalizeNotEnoughReports": "0x1862d9df4def8c3acbc67df7ac9188bac91dcd24",
        "roundTwo": "0xa8b773abb39c61a4f831a8b6b2059fda4ccfb8e1",
        "roundTwoPenalize": "0x6d627faf0e57f1aa91a33c87ec755974a1814edc",
        "sendReputation": "0x34a58e5132485549db47b308e195794c7b782dda",
        "slashRep": "0x3aafcfc9768794e8e4a49bf1111a2a2606b0b155",
        "trade": "0x9f986a05073a7ab803de685ecf6264592b624c67",
        "backstops": "0x19488cee1798884ceda5fac78bc317e6008d5ea9",
        "branches": "0xb5f19caa51984535ee5a27ef2645a5b03dd41d4f",
        "cash": "0xeaa0b868f9c774867f298ccd47aec3b6ed458ad7",
        "consensusData": "0xfda81d2eed91ca7fed78200ae3d7fdff94a15741",
        "events": "0x9089ab1c84eb78a1272f8582c1ddc7b3d758f386",
        "expiringEvents": "0x9ef6af92e1c5aa2bc8631b6eb2dfb356d6e32036",
        "fxpFunctions": "0x5fb9570ee96d23a081c5b722097e4d753cb84e4d",
        "info": "0x8073fc32cce0f13e04703fac0c89464ba0a268bb",
        "markets": "0xc5a1a957bb9c00becd097fe9b639d0dacf26939b",
        "reporting": "0x34b774f33438f79963c0a454f314189430bbfeaf",
        "trades": "0x20c6925451f3b69424bc9383482ff070850046d5"
    },
    "errors": {
        "0x": "no response or bad input",
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizationCatchup": {
            "-2": "can only be called during the first half of the reporting period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "createSingleEventMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buy": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle-only branch",
            "-0x4": "not enough money or shares"
        },
        "sell": {
            "-0x1": "amount/price bad or no market",
            "-0x2": "oracle only branch",
            "-0x4": "not enough money or shares"
        },
        "trade": {
            "-1": "oracle only branch",
            "-2": "bad trade hash",
            "-3": "trader doesn't exist / own shares in this market",
            "-4": "must buy at least .00000001 in value",
            "10": "insufficient balance"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        }
    }
}
