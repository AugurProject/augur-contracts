{
    "2": {
        "buyAndSellShares": "0x0747a91108ac052a0ed88ca7b21f447b5431d0da",
        "closeMarket": "0x5b109439001464cf02ceb7d57b453df277aa5e8b",
        "closeMarketEight": "0x2da0721e7cf4e713efa7c3253fd8994193d4c6d7",
        "closeMarketFour": "0xde57efcde7e9be460796c631e8295f96ae0b9fa0",
        "closeMarketOne": "0x185234d6c3ab999231f2507856f3eb329e9a886a",
        "closeMarketTwo": "0xe5c4f716be9d973b8d2bba67b4379a88bbf33054",
        "consensus": "0xdcc31bd45eb3cec9897175a3b2995ac9a16cc037",
        "createBranch": "0xb93a72e5cdbcbf1955c1e77f3aa2d96b6ab33a37",
        "createEvent": "0x5da3af9186a32e17f8e217407db6313986442054",
        "createMarket": "0x7285f1ca78d50ceed5449aa4b88aae119997ff65",
        "createSingleEventMarket": "0x4bfe640479d8a8bf3e4f2b14a8f08d362a6f8c92",
        "eventResolution": "0x9a87a84662629ba3d2314f8e1396aee95346acc0",
        "faucets": "0x0975b96375e27a8ddb8856d04f7f7f635fb194a8",
        "makeReports": "0xe2223191e67b2d3595e9fa6d8cbdfcd9f8affc81",
        "orderBook": "0xf0f34588f127657646907e5848a9585b5bccfe93",
        "ramble": "0x3881d38ff80f125793d856fd1a0b0440dc78927d",
        "sendReputation": "0xd25cd9d49fd95746d5a9f67806ace77a0c0ee396",
        "transferShares": "0x9b0e15de811cb8a0c1e81ada8c2c2287c3a89c38",
        "branches": "0x61048e74feb663c667ab64f3f74031cb6b8603b2",
        "cash": "0x8bb3c2d46642afd004d49041e8b09d24099c3abd",
        "events": "0x618a2c90aa9ea8eb8eb45b3a2690e30539e18939",
        "expiringEvents": "0xa5f5921abbdc9fd1f04d14cf93b38620c0d0ec0e",
        "fxpFunctions": "0x6cfbb1879374737aeaf8e3b390bca2fae492dcf8",
        "info": "0xa62edbc5f5cb14451156f5de34a989d2b64ab299",
        "markets": "0x30cc3eb5159ec66f8a896ceb6ad3b9a0cbdbda22",
        "reporting": "0x955206a8a895fa7c505472c96c68f393b5c542db"
    },
    "7": {
        "buyAndSellShares": "0x271ee62a8577a97d648c4b4eb3a0e56306f711c1",
        "closeMarket": "0x7a2e05c795fbf585af34cebe760602b8425846dd",
        "closeMarketEight": "0x66021d8b17cd9b90dc53012ba6c8cec8aaef2d1b",
        "closeMarketFour": "0xfb5c088e0d2b8400800c61ac0d69cfd11261401c",
        "closeMarketOne": "0xbfaa24839dec3961c010c4831709bdecbac382f5",
        "closeMarketTwo": "0x8bb3073196dbdbf425157b3d83156f18c5c0e776",
        "consensus": "0xc4d92584ea34be5dd2b916c464e55ec9b4bd1f8f",
        "createBranch": "0xb005839c49a328850bb22359bb66f9ba1a0f9994",
        "createEvent": "0x0c532debb932ddb5d07eb957bf8ff5975e932ca3",
        "createMarket": "0x26ff0f6452673ff11dd8497491b271a18c76990e",
        "createSingleEventMarket": "0x6f5452dca9bbfe8ac9151dd0e67c8dde8b1c6572",
        "eventResolution": "0xd399af9820be7ddda37c7d85e701bf8ee2337739",
        "faucets": "0x94bab6be74df76e996b20329dff2ec39d3013dc3",
        "makeReports": "0x0b7c36b76208e2c968b04dce0658c03c27bfdc00",
        "orderBook": "0xf86bbf277ae88a8b50ae90d97e1aafb1390e2984",
        "ramble": "0x2258a25e503b19dc3d2c2fdc9ca57a1d5985e30c",
        "sendReputation": "0x7e049a60e0106d263ffd0a60bcfbf4f63dd1f2a4",
        "transferShares": "0x40343b107ef5dee9c240ff5f1f87f0afb6f709dc",
        "branches": "0x44cecf2528fbc502f31a58cfce99b8bae992b9c4",
        "cash": "0x9ef25450d88c82118a3395f57e7a29931305ac6d",
        "events": "0xa95fa8fe1f544d80afa29ffb0a959116c842e110",
        "expiringEvents": "0xad225235b9da03bbfda4fb79bf4e2356296e7d7f",
        "fxpFunctions": "0xa1a240f9f505aa06e9eabe405ffab14689dfdda3",
        "info": "0x087785682381a1316303efb19d1d450562603fca",
        "markets": "0xfd0f6987c7042e867db9c1dae6e681b2c3648de2",
        "reporting": "0x9d358fee98edb880e6a4549e21f4ab66dfcadfa7"
    },
    "10101": {
        "buyAndSellShares": "0xd15a6cfc462ae76b9ec590cab8b34bfa8e1302d7",
        "closeMarket": "0x35152caa07026203a1add680771afb690d872d7d",
        "closeMarketEight": "0x9fe69262bbaa47f013b7dbd6ca5f01e17446c645",
        "closeMarketFour": "0xabe47f122a496a732d6c4b38b3ca376d597d75dd",
        "closeMarketOne": "0x8caf2c0ce7cdc2e81b58f74322cefdef440b3f8d",
        "closeMarketTwo": "0x81a7621e9a286d061b3dea040888a51c96693b1c",
        "consensus": "0x6c4c9fa11d6d8ed2c7a08ddcf4d4654c85194f68",
        "createBranch": "0x8c19616de17acdfbc933b99d9f529a689d22098f",
        "createEvent": "0x5069d883e31429c6dd1325d961f443007747c7a2",
        "createMarket": "0x3f3276849a878a176b2f02dd48a483e8182a49e4",
        "createSingleEventMarket": "0xc1c4e2f32e4b84a60b8b7983b6356af4269aab79",
        "eventResolution": "0x52ccb0490bc81a2ae363fccbb2b367bca546cec7",
        "faucets": "0x4a61f3db785f1e2a23ffefeafaceeef2df551667",
        "makeReports": "0x60cb05deb51f92ee25ce99f67181ecaeb0b743ea",
        "orderBook": "0x8a4e2993a9972ee035453bb5674816fc3a698718",
        "ramble": "0xa34c9f6fc047cea795f69b34a063d32e6cb6288c",
        "sendReputation": "0x5f67ab9ff79be97b27ac8f26ef9f4b429b82e2df",
        "transferShares": "0xe5b327630cfa7f4b2324f9066c897dceecfd88a3",
        "branches": "0x0fbddb6bfb81c8d0965a894567cf4061446072c2",
        "cash": "0x8f2c2267687cb0f047b28a1b6f945da6e101a0d7",
        "events": "0xbd19195b9e8a2d8ed14fc3a2823856b5c16f7f55",
        "expiringEvents": "0x482c57abdce592b39434e3f619ffc3db62ab6d01",
        "fxpFunctions": "0x708fdfe18bf28afe861a69e95419d183ace003eb",
        "info": "0x77c424f86a1b80f1e303d1c2651acd6aba653cb6",
        "markets": "0xc21cfa6688dbfd2eca2548d894aa55fd0bbf1c7e",
        "reporting": "0xe4714fcbdcdba49629bc408183ef40d120700b8d"
    },
    "errors": {
        "0x": "no response or bad input",
        "getSimulatedBuy": {
            "-2": "cost updating error (did you enter a valid quantity?)"
        },
        "getSimulatedSell": {
            "-2": "cost updating error (did you enter a valid quantity?)"
        },
        "closeMarket": {
            "0": "fail/trading not over yet/event not expired or closed already",
            "-1": "Market has no cash anyway / already closed",
            "-2": "0 outcome",
            "-4": "Outcome .5 once, pushback and retry",
            "-6": "bonded pushed forward market not ready to be resolved",
            "-7": "event not reportable >.99"
        },
        "claimProceeds": {
            "0": "reporting not done",
            "-1": "trader doesn't exist"
        },
        "report": {
            "0": "could not set reporter ballot",
            "-1": "report length does not match number of expiring events",
            "-2": "voting period expired",
            "-3": "incorrect hash"
        },
        "submitReportHash": {
            "0": "could not set report hash",
            "-1": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-2": "not in hash submitting timeframe or event doesn't exist / not a valid event expiring then",
            "-4": "already resolved",
            "-5": ".99 market",
            "-6": "no markets"
        },
        "submitReport": {
            "-1": "has already reported",
            "-2": "reporter (you) doesn't (don't) exist, or voting period over or hasn't started yet",
            "-3": "hash doesn't match",
            "-4": "no rep",
            "-5": "bad report",
            "-6": "hash not low enough",
            "-8": "invalid event",
            "-9": "already resolved",
            "-10": "<24 hr left in period, too late to report, able to put up readj. bonds though"
        },
        "checkReportValidity": {
            "-1": "report isn't long enough",
            "-2": "reporter doesn't exist, voting period is over, or voting period hasn't started yet"
        },
        "penalizeNotEnoughReports": {
            "-1": "already done",
            "-2": "hasn't reported this period"
        },
        "penalizeWrong": {
            "-1": "pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period",
            "-2": "already past first half of new period and needed to penalize before then",
            "-3": "need to do not enough reports penalization [or lackthereof]"
        },
        "collectFees": {
            "-2": "needs to be second half of reporting period to claim rep [1st half is when redistribution is done]"
        },
        "slashRep": {
            "0": "not a valid claim",
            "-2": "reporter doesn't exist"
        },
        "createSubbranch": {
            "-1": "bad input or parent doesn't exist",
            "-2": "no money for creation fee or branch already exists"
        },
        "createEvent": {
            "0": "not enough money to pay fees or event already exists",
            "-1": "we're either already past that date, branch doesn't exist, or description is bad",
            "-2": "max value < min value"
        },
        "createMarket": {
            "-1": "bad input or parent doesn't exist",
            "-2": "too many events",
            "-3": "too many outcomes",
            "-4": "not enough money or market already exists",
            "-5": "fee too low",
            "-6": "duplicate events",
            "-7": "event already expired"
        },
        "sendReputation": {
            "0": "not enough reputation",
            "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
            "-2": "Receiving address doesn't exist"
        },
        "buyShares": {
            "-1": "invalid outcome or trading closed",
            "-2": "entered a -amt of shares",
            "-3": "not enough money / limit order too low",
            "-4": "invalid outcome",
            "-5": "bad commitment or no commitment",
            "-6": "oracle only branch, no trading"
        },
        "sellShares": {
            "-1": "invalid outcome, trading closed, or you haven't traded in this market",
            "-2": "entered a -amt of shares",
            "-3": "you own no shares / limit price too high",
            "-5": "bad commitment or no commitment",
            "-6": "oracle only branch, no trading"
        },
        "WHISPER_POST_FAILED": {
            "error": 65,
            "message": "could not post message to whisper"
        },
        "DB_DELETE_FAILED": {
            "error": 97,
            "message": "database delete failed"
        },
        "DB_WRITE_FAILED": {
            "error": 98,
            "message": "database write failed"
        },
        "DB_READ_FAILED": {
            "error": 99,
            "message": "database read failed"
        },
        "INVALID_CONTRACT_PARAMETER": {
            "error": 400,
            "message": "cannot send object parameter to contract"
        },
        "NOT_LOGGED_IN": {
            "error": 401,
            "message": "not logged in"
        },
        "PARAMETER_NUMBER_ERROR": {
            "error": 402,
            "message": "wrong number of parameters"
        },
        "BAD_CREDENTIALS": {
            "error": 403,
            "message": "incorrect handle or password"
        },
        "TRANSACTION_NOT_FOUND": {
            "error": 404,
            "message": "transaction not found"
        },
        "PASSWORD_TOO_SHORT": {
            "error": 405,
            "message": "password must be at least 6 characters long"
        },
        "NULL_CALL_RETURN": {
            "error": 406,
            "message": "expected contract call to return value, received null"
        },
        "NULL_RESPONSE": {
            "error": 407,
            "message": "expected transaction hash from Ethereum node, received null"
        },
        "NO_RESPONSE": {
            "error": 408,
            "message": "no response"
        },
        "INVALID_RESPONSE": {
            "error": 409,
            "message": "could not parse response from Ethereum node"
        },
        "LOCAL_NODE_FAILURE": {
            "error": 410,
            "message": "RPC request to local Ethereum node failed"
        },
        "HOSTED_NODE_FAILURE": {
            "error": 411,
            "message": "RPC request to hosted nodes failed"
        },
        "HANDLE_TAKEN": {
            "error": 422,
            "message": "handle already taken"
        },
        "FILTER_NOT_CREATED": {
            "error": 450,
            "message": "filter could not be created"
        },
        "TRANSACTION_FAILED": {
            "error": 500,
            "message": "transaction failed"
        },
        "TRANSACTION_NOT_CONFIRMED": {
            "error": 501,
            "message": "polled network but could not confirm transaction"
        },
        "DUPLICATE_TRANSACTION": {
            "error": 502,
            "message": "duplicate transaction"
        },
        "RAW_TRANSACTION_ERROR": {
            "error": 503,
            "message": "error sending client-side transaction"
        },
        "RLP_ENCODING_ERROR": {
            "error": 504,
            "message": "RLP encoding error"
        },
        "NO_MARKET_INFO": {
            "error": 505,
            "message": "could not retrieve market data"
        },
        "IPFS_ADD_FAILURE": {
            "error": 506,
            "message": "files could not be added to IPFS"
        },
        "IPFS_GET_FAILURE": {
            "error": 507,
            "message": "could not retrieve file from IPFS"
        },
        "RPC_TIMEOUT": {
            "error": 599,
            "message": "timed out while waiting for Ethereum network response"
        },
        "LOOPBACK_NOT_FOUND": {
            "error": 650,
            "message": "loopback interface required for synchronous local commands"
        },
        "ETHEREUM_NOT_FOUND": {
            "error": 651,
            "message": "no active ethereum node(s) found"
        },
        "ROOT_NOT_FOUND": {
            "error": 700,
            "message": "no LS-LMSR objectve function solution found"
        },
        "CHECK_ORDER_BOOK_FAILED": {
            "error": 710,
            "message": "could not check order book using current prices"
        }
    }
}